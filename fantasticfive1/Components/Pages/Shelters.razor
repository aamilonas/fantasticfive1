@page "/shelters"
@using fantasticfive1.Models
@using fantasticfive1.Data
@inject fantasticfive1.Data.LookupService lookupservice;
@rendermode InteractiveServer

<br/>

<!-- Container for form elements to align them on the left side -->
<div class="d-flex flex-column align-items-start" style="margin-left: 20px;">
    <div class="form-check form-switch">
        <input class="form-check-input" style="font-size: 1.5rem;margin-right: 10px;" type="checkbox" role="switch" id="WomenChildren" @bind="WomenChildrenBool">
        <label class="form-check-label" style="font-size: 1.5rem;margin-right: 10px;" for="WomenChildren">Women and Child Friendly</label>
    </div>

    <div class="form-check form-switch">
        <input class="form-check-input" style="font-size: 1.5rem;margin-right: 10px;" type="checkbox" role="switch" id="PetFriendly" @bind="PetFriendlyBool">
        <label class="form-check-label" style="font-size: 1.5rem;margin-right: 10px;" for="PetFriendly">Pet Friendly</label>
    </div>

    <div class="d-flex align-items-center">
        <label for="MaxDistance" style="font-size: 1.5rem; margin-right: 10px;">Max Distance:</label>
        <select class="form-select" @bind="MaxDistance" style="width: auto; font-size: 1.5rem;">
            <option value="5">5 Miles</option>
            <option value="10">10 Miles</option>
            <option value="25">25 Miles</option>
        </select>
    </div>
</div>

<div class="d-flex justify-content-center" style="margin: 20px 0;">
    <button class="btn btn-primary" @onclick="RefreshShelters" disabled="@isRefreshing">
        @if (isRefreshing)
        {
            <span>Refreshing...</span>
        }
        else
        {
            <span>Refresh Shelters</span>
        }
    </button>
</div>

<div class="container">
    <h1>Shelters</h1>
    <table class="table table-light">
        <thead>
            <tr>
                <th>Name</th>
                <th>Address</th>
                <th>Hours</th>
                <th>Phone</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var shelter in shelters)
            {
                <tr>
                    <td>@shelter.Name</td>
                    <td>@shelter.Address</td>
                    <td>@shelter.Hours</td>
                    <td>@shelter.PhoneNumber</td>
                </tr>
            }

        </tbody>
    </table>
</div>

@code {
    private List<Shelter> shelters = new List<Shelter>();

    private int WomenChildren { get; set; } = 0;
    private int PetFriendly { get; set; } = 0;
    private bool isRefreshing = false;
    private string MaxDistance;

    protected override async Task OnInitializedAsync()
    {
        shelters = await lookupservice.ShelterLookup();
    }


    private bool WomenChildrenBool
    {
        get => WomenChildren == 1;
        set => WomenChildren = value ? 1 : 0;
    }

    private bool PetFriendlyBool
    {
        get => PetFriendly == 1;
        set => PetFriendly = value ? 1 : 0;
    }
    private async Task RefreshShelters()
    {
        isRefreshing = true;

        // Call the service method with the current filter values
        shelters = await lookupservice.ShelterLookupWQs(WomenChildren, PetFriendly);

        isRefreshing = false;
    }
}
