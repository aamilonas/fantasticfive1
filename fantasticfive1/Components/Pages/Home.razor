@page "/"
@inject IHttpClientFactory HttpClientFactory;
@using System.Text.Json
@using System.Text.Json.Serialization

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>


<div class="container mt-4">
    
    <NavLink href="shelters"><button class="btn" style="background-color: #2A9D8F; color: white; width: 100%; padding: 1.0rem 0; font-size: 3.25rem; font-family: 'Arial', sans-serif; border-radius: 1.5rem;">Shelters & Housing</button></NavLink>
    <NavLink href="donations"><button class="btn mt-2" style="background-color: #E9C46A; color: white; width: 100%; padding: 1.0rem 0; font-size: 3.25rem; font-family: 'Arial', sans-serif; border-radius: 1.5rem;">Donations</button></NavLink>
    <NavLink href="jobs"><button class="btn mt-2" style="background-color: #F4A261; color: white; width: 100%; padding: 1rem 0; font-size: 3.25rem; font-family: 'Arial', sans-serif; border-radius: 1.5rem;">Jobs</button></NavLink>
    <NavLink href="harmreduction"><button class="btn mt-2" style="background-color: #E76F51; color: white; width: 100%; padding: 1rem 0; font-size: 3.25rem; font-family: 'Arial', sans-serif; border-radius: 1.5rem;">Harm Reduction</button></NavLink>
@*     <button class="btn mt-2" style="background-color: #F9D5B0; color: white; width: 100%; padding: 1rem 0; font-size: 3.25rem; font-family: 'Arial', sans-serif; border-radius: 1.5rem;">Jobs</button> *@
</div>

@code {
 
    private WeatherResponse? weatherData;
    private bool getWeatherError;

    protected override async Task OnInitializedAsync()
    {
        var request = new HttpRequestMessage(HttpMethod.Get,
            "https://api.openweathermap.org/data/2.5/weather?lat=26.2015614&lon=-80.294&appid=d98137e9d65039fd44a40bc77091ed0b&units=imperial");
        var client = HttpClientFactory.CreateClient();

        var response = await client.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            using var responseStream = await response.Content.ReadAsStreamAsync();
            weatherData = await JsonSerializer.DeserializeAsync<WeatherResponse>(responseStream);
        }
        else
        {
            getWeatherError = true;
        }

        StateHasChanged(); // Ensure the UI updates after loading the data
    }
    // Define the models that match the OpenWeather API JSON structure
    public class WeatherResponse
    {
        [JsonPropertyName("weather")]
        public List<WeatherCondition>? Weather { get; set; }

        [JsonPropertyName("main")]
        public WeatherMain? Main { get; set; }
    }

    public class WeatherCondition
    {
        [JsonPropertyName("description")]
        public string? Description { get; set; }

        [JsonPropertyName("icon")]
        public string? Icon { get; set; }
    }

    public class WeatherMain
    {
        [JsonPropertyName("temp")]
        public float Temp { get; set; }
    }
}
