@page "/"
@inject IHttpClientFactory HttpClientFactory;
@using System.Text.Json
@using System.Text.Json.Serialization
@using System.Globalization

<PageTitle>Home</PageTitle>
<div class="container mt-4 bg-dark-subtle" style="display: flex; justify-content: space-between; align-items: center;">
    <div class="clock align-middle" style="font-size: 3rem; font-family: 'Arial', sans-serif;">
        @currentTime
    </div>

    <div class="weather-info"
        style="font-size: 2rem; font-family: 'Arial', sans-serif; padding: 1rem; text-align: right;">
        @if (weatherData != null && !getWeatherError)
        {
            <div>
                <img src="https://openweathermap.org/img/w/@(weatherData?.Weather?[0]?.Icon ?? "default").png" alt="Weather Icon"
                    style="width: 80px; height: 80px;" />
                <div>@(weatherData?.Main?.Temp ?? 0)°F - @(CapitalizeDescription(weatherData?.Weather?[0]?.Description ?? "Unknown"))</div>
            </div>
        }
        else if (getWeatherError)
        {
            <div>Error fetching weather data</div>
        }
        else
        {
            <div>Loading weather data...</div>
        }
    </div>
</div>

@if (weatherwarning)
{
                                                                <br>
                                                                    <div class="alert alert-danger d-flex align-items-center" role="alert">
                                                                            <i class="bi bi-exclamation-triangle-fill"></i>
                                                                            <div class="mx-3 d-flex flex-row justify-content-evenly w-100">
                                                                                <p class="my-0 align-self-center">Severe heat conditions are forecasted in your area. Please take care and find shelter</p>
                                                                                <a 
                                                                                    href="https://apex.oracle.com/pls/apex/r/gfledu/search-smart-database145634/shelters-near-me"
                                                                                    class="btn btn-danger ms-auto">Find Near Me</a>
                                                                            </div>
                                                                        </div>
}
@if(String.Compare(currentTime, "9:00 AM") > 0)
{
     <br>
                                                                    <div class="alert alert-info d-flex align-items-center" role="alert">
                                                                            <i class="bi bi-info-circle-fill"></i>
                                                                            <div class="mx-3 d-flex flex-row justify-content-evenly w-100">
                                                                                <p class="my-0 align-self-center">Do you have a safe place to stay?</p>
                                                                                <a 
                                                                                    href="https://apex.oracle.com/pls/apex/r/gfledu/search-smart-database145634/shelters-near-me"
                                                                                    class="btn btn-info ms-auto">Find Near Me</a>
                                                                            </div>
                                                                        </div>
}
<div class="button-group" style="margin-top: 2rem;">
    <NavLink href="shelters">
        <button class="btn"
            style="background-color: #2A9D8F; color: white; width: 100%; padding: 1.0rem 0; font-size: 3.25rem; font-family: 'Arial', sans-serif; border-radius: 1.5rem;">
            Shelters & Housing
        </button>
    </NavLink>

    <NavLink href="resources">
        <button class="btn mt-2"
                style="background-color: #264653; color: white; width: 100%; padding: 1.0rem 0; font-size: 3.25rem; font-family: 'Arial', sans-serif; border-radius: 1.5rem;">
            Resources
        </button>
    </NavLink>

    <NavLink href="donations">
        <button class="btn mt-2"
            style="background-color: #E9C46A; color: white; width: 100%; padding: 1.0rem 0; font-size: 3.25rem; font-family: 'Arial', sans-serif; border-radius: 1.5rem;">
            Pay It Forward
        </button>
    </NavLink>
    <NavLink href="jobs">
        <button class="btn mt-2"
            style="background-color: #F4A261; color: white; width: 100%; padding: 1rem 0; font-size: 3.25rem; font-family: 'Arial', sans-serif; border-radius: 1.5rem;">
            Jobs
        </button>
    </NavLink>
    <NavLink href="harmreduction">
        <button class="btn mt-2"
            style="background-color: #E76F51; color: white; width: 100%; padding: 1rem 0; font-size: 3.25rem; font-family: 'Arial', sans-serif; border-radius: 1.5rem;">
            Harm Reduction
        </button>
    </NavLink>
</div>


@code {

    private WeatherResponse? weatherData;
    private bool getWeatherError;
    private bool weatherwarning = false;
    private string currentTime = DateTime.Now.ToString("hh:mm:ss tt");

    private string CapitalizeDescription(string description)
    {
        var textInfo = new CultureInfo("en-US", false).TextInfo;
        return textInfo.ToTitleCase(description);
    }

    protected override async Task OnInitializedAsync()
    {
        // Start the clock
        var timer = new System.Threading.Timer(UpdateClock, null, 0, 1000);

        var request = new HttpRequestMessage(HttpMethod.Get,
        "https://api.openweathermap.org/data/2.5/weather?lat=26.2015614&lon=-80.294&appid=8ed9d02627a9aeb6207c2af913d2b217&units=imperial");
        var client = HttpClientFactory.CreateClient();

        var response = await client.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            using var responseStream = await response.Content.ReadAsStreamAsync();
            weatherData = await JsonSerializer.DeserializeAsync<WeatherResponse>(responseStream);

            if (weatherData != null && weatherData.Main != null && weatherData.Main.Temp > 60)
            {
                weatherwarning = true;
            }
        }
        else
        {
            getWeatherError = true;
        }

        StateHasChanged(); // Ensure the UI updates after loading the data
    }

    private void UpdateClock(object? state)
    {
        currentTime = DateTime.Now.ToString("h:mm tt");
        InvokeAsync(() => StateHasChanged());
    }
    // Define the models that match the OpenWeather API JSON structure
    public class WeatherResponse
    {
        [JsonPropertyName("weather")]
        public List<WeatherCondition>? Weather { get; set; }

        [JsonPropertyName("main")]
        public WeatherMain? Main { get; set; }
    }

    public class WeatherCondition
    {
        [JsonPropertyName("description")]
        public string? Description { get; set; }

        [JsonPropertyName("icon")]
        public string? Icon { get; set; }
    }

    public class WeatherMain
    {
        [JsonPropertyName("temp")]
        public float Temp { get; set; }
    }
}
