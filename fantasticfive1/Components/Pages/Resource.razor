@page "/resources"
@using fantasticfive1.Models
@using fantasticfive1.Data
@inject fantasticfive1.Data.LookupService lookupservice;
@rendermode InteractiveServer

<PageTitle>Support Squad: Resources</PageTitle>
<h2 class="display-1">Resources</h2>

<!-- Button Group for unique items -->
    <div class="btn-group" role="group">
        @foreach (var item in resourceTypes)
        {
            @if(item == "Select a resource type...") continue;
            <button type="button" class="btn color-1 text-light" @onclick="() => TypeChange(item)">@item</button>
        }
    </div>

<div class="container">
    <h3 class="display-4 mt-2">Shelters</h3>
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Name</th>
                <th>Address</th>
                <th>Hours</th>
                <th>Phone</th>
                <th>Type</th>
                <th>Wifi</th>
                <th>AC</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var landmark in landmarks)
            {
                <tr>
                    <td>@landmark.Name</td>
                    <td>@landmark.Address</td>
                    <td>@landmark.Hours</td>
                    <td>@landmark.PhoneNumber</td>
                    <td>@landmark.Type</td>
                    <td>@landmark.Wifi</td>
                    <td>@landmark.AC</td>

                </tr>
            }

        </tbody>
    </table>
</div>

@code {

    private List<Landmark> landmarks = new List<Landmark>();
    // List of unique resource types
    private List<string> resourceTypes = new List<string>
    {
        "24 Hour Bathroom",
        "Church",
        "Shower",
        "Wifi",
        "Shelter",
        "24 Hour Cafe",
        "Bathroom",
        "Food Pantry",
        "Cafe",
        "Gym",
        "Community Center",
        "Resource Hub",
        "Soup Kitchen"
    };



    // Selected resource type
    private string selectedResourceType = string.Empty;

    // Function that gets called when an item is selected
    private async void TypeChange(string e)
    {
        selectedResourceType = e;  // Get the selected value
        if (!string.IsNullOrEmpty(selectedResourceType))
        {
            await getByType(selectedResourceType);  // Call the function with the selected type
        }
    }

    // Function to get landmarks by resource type
    private async Task getByType(string type)
    {
        landmarks = await lookupservice.resourceByType(type);  // Fetch the landmarks
        StateHasChanged();  // Refresh the UI after fetching new data
    }
}